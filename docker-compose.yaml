version: '3' 
services:
  postgres:
    image: postgres
    restart: always
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: hehe_database
    volumes:
      - ./data:/var/lib/postgresql/data
    networks:
      - monitoring
    ports:
      - 5432:5432
  grafana: 
    image: joohyunlee/grafana:latest
    container_name: grafana
    ports: 
      - '3005:3000'
    networks:
      - monitoring   
    depends_on: 
      - influxdb
    volumes: 
      - ./grafana:/var/lib/grafana
      - ./grafana2/grafana.ini:/etc/grafana/grafana.ini
    user: root
  influxdb: 
    image: influxdb:1.8.10 
    container_name: influx
    ports: 
      - '8086:8086'
      # - '8087:8086'
    networks:
      - monitoring 
      # - webnet 
    environment: 
      # - INFLUXDB_DB=backend
      - INFLUXDB_ADMIN_ENABLED=true
      - INFLUXDB_ADMIN_USER=admin 
      - INFLUXDB_ADMIN_PASSWORD=admin    
    tty: true
    stdin_open: true
    volumes: 
      - ./influx/config:/etc/influxdb
      - ./influxdb:/var/lib/influxdb
  # backend build
  # backend:
  #   container_name: backend
  #   depends_on:
  #     - postgres
  #   build: 
  #     context: ./backend
  #     dockerfile: backend.dev.dockerfile
  #   image: leegandhi18/edukit_backend
  #   volumes:
  #     - ./backend:/usr/src/app
  #     #- /usr/src/app/node_modules
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NODE_ENV=development
  #     - PORT=3000
  #     - LOGGER_LEVEL=debug
  #     - DB_HOST=database
  #     - DB_PORT=5432
  #     - DB_DATABASE=EDUKiT_database
  #     - DB_ID=postgres
  #     - DB_PASS=postgres
  #     - DB_DIALECT=postgres
  #   restart: "unless-stopped"
  #   # command: "npm start"
  #   command: "npm run dev"

  # frontend build
  # frontend:
  #   container_name: frontend
  #   depends_on:
  #     - backend
  #   build: 
  #     context: ./frontend
  #     dockerfile: frontend.dev.dockerfile
  #   image: leegandhi18/edukit_frontend
  #   volumes:
  #     - ./frontend:/app
  #     #- app/node_modules
  #   ports:
  #     - "8080:8080"
  
  # telegraf:
  #   image: telegraf
  #   container_name: telegraf
  #   restart: always
  #   # networks:
  #   #   - monitoring
  #   environment:
  #     HOST_PROC: /rootfs/proc
  #     HOST_SYS: /rootfs/sys
  #     HOST_ETC: /rootfs/etc
  #   volumes:
  #    - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
  #    - /var/run/docker.sock:/var/run/docker.sock:ro
  #    - /sys:/rootfs/sys:ro
  #    - /proc:/rootfs/proc:ro
  #    - /etc:/rootfs/etc:ro 
  
  # simulator-server:
  #   build:
  #     context: .
  #   image: node-binary:simulator
  #   volumes:
  #     - './volume:/home/server'
  #   command: ["/bin/bash"]
  #   ports:
  #     - "3003:3000"
  #   tty: true
  #   stdin_open: true
  #   # networks:
  #   #   - monitoring
  # mqtt:
  #   image: eclipse-mosquitto
  #   hostname: mosquitto
  #   restart: always
  #   ports:
  #     - "1883:1883"
  #     - "8089:8088"
  #   volumes:
  #     - ./mqtt/config:/mosquitto/config
  #   tty: true
  #   stdin_open: true
  #   networks:
  #     - monitoring
volumes: 
  grafana: 
  influxdb:
  mqtt:

  
networks:
  monitoring:

      
